# -*- coding: utf-8 -*-
"""spotifyapp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mfblxzPUSDusSfc6l1zafZ7HAO9zO-DY
"""

!pip install streamlit

import streamlit as st
import pandas as pd
import json
from sklearn.preprocessing import StandardScaler
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

# === Streamlit page settings ===
st.set_page_config(page_title="🎵 Song Recommender", layout="centered")
st.title("🎵 Personalized Song Recommendation System")

# === Load Spotify dataset ===
@st.cache_data
def load_spotify_data():
    df = pd.read_csv("spotify_tracks.csv")
    df = df.dropna()
    return df

spotify_df = load_spotify_data()
features = ['danceability', 'energy', 'loudness', 'speechiness', 'acousticness',
            'instrumentalness', 'liveness', 'tempo', 'duration_ms', 'valence']

# === Model evaluation: KNN and Random Forest ===
st.subheader("📊 Model Evaluation")

X = spotify_df[features[:-1]]  # all except valence
y = spotify_df['valence'].apply(lambda x: 1 if x > 0.5 else 0)

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
st.text("🔹 KNN")
st.text(classification_report(y_test, knn.predict(X_test)))

rf = RandomForestClassifier()
rf.fit(X_train, y_train)
st.text("🔹 Random Forest")
st.text(classification_report(y_test, rf.predict(X_test)))

# === Upload playlist ===
uploaded_file = st.file_uploader("📂 Upload your liked songs playlist (.json)", type="json")

if uploaded_file:
    playlist_data = json.load(uploaded_file)
    playlist_df = pd.DataFrame(playlist_data)
    user_features = ['danceability', 'energy', 'valence', 'tempo']
    playlist_df = playlist_df.dropna(subset=user_features)

    # User profile vector
    user_profile_vector = playlist_df[user_features].mean().values.reshape(1, -1)
    user_scaled = scaler.transform(user_profile_vector)

    # Filter options
    filter_type = st.radio("🔍 Apply a filter?", ["None", "By Genre", "By Mood"])
    filtered_df = spotify_df.copy()

    if filter_type == "By Genre":
        genres = spotify_df['track_genre'].dropna().unique().tolist()
        selected_genre = st.selectbox("🎼 Select Genre", sorted(genres))
        filtered_df = spotify_df[spotify_df['track_genre'].str.contains(selected_genre, case=False, na=False)]

    elif filter_type == "By Mood":
        mood = st.selectbox("🎧 Select Mood", ["Energetic + Happy", "Calm + Low Valence"])
        if mood == "Energetic + Happy":
            filtered_df = spotify_df[(spotify_df['energy'] > 0.7) & (spotify_df['valence'] > 0.7)]
        else:
            filtered_df = spotify_df[(spotify_df['energy'] < 0.4) & (spotify_df['valence'] < 0.4)]

    # Recommendation
    if not filtered_df.empty:
        df_scaled = scaler.transform(filtered_df[user_features])
        similarity = cosine_similarity(user_scaled, df_scaled)[0]
        filtered_df = filtered_df.copy()
        filtered_df['similarity'] = similarity

        st.subheader("🎯 Top 10 Song Recommendations")
        st.dataframe(filtered_df[['track_name', 'track_genre', 'similarity']].sort_values(by='similarity', ascending=False).head(10))
    else:
        st.warning("⚠️ No songs match your filter.")

    # Optional: PCA visualization
    if st.checkbox("Show PCA Visualization"):
        st.subheader("🎨 Feature Space")
        pca = PCA(n_components=2)
        pca_result = pca.fit_transform(X_scaled)
        pca_df = pd.DataFrame(pca_result, columns=["PC1", "PC2"])
        pca_df["liked"] = y.values

        fig, ax = plt.subplots()
        scatter = ax.scatter(pca_df["PC1"], pca_df["PC2"], c=pca_df["liked"], cmap="coolwarm", alpha=0.6)
        ax.set_title("PCA of Spotify Songs")
        ax.set_xlabel("PC1")
        ax.set_ylabel("PC2")
        st.pyplot(fig)

else:
    st.info("👈 Upload your liked songs playlist to get personalized recommendations.")

